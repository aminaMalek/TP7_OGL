plugins {
    id 'java'
    id("org.sonarqube") version "4.4.0.3356"
    id("maven-publish")
    id("io.github.oleksiiparf.slack-webhook") version "1.0.0"
    id("de.zebrajaeger.sendMail") version "0.2.2"
}

group = 'com.example'
version = '1.0'

repositories {
    mavenCentral()

}

dependencies {
    testImplementation 'io.cucumber:cucumber-java:6.0.0'
    testImplementation 'io.cucumber:cucumber-junit:6.0.0'
    testImplementation 'junit:junit:4.12'
}

sonar {
    properties {
        property "sonar.projectKey", "com.example:tp5"
        property "sonar.projectName", "tp5"
        property "sonar.skipCompile", "true"
        property 'sonar.qualitygate.wait', true
        property "sonar.host.url", "http://197.140.142.82:9000"
        property "sonar.projectVersion", "1.0"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.jacoco.reportPaths", "build/jacoco/test.exec"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"

    }
}

publishing {
    repositories {
        maven {
            url = "https://mymavenrepo.com/repo/Zc68yw3vcV22pNUnAtgP/"
            credentials {
                username 'myMavenRepo'
                password '12345678'
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

task postPublishedPluginToSlack {
  doLast {
    def webhookUrl = 'https://hooks.slack.com/services/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'
    def message = '{"text": "Project is published! "}'

    // Create the URL object
    def url = new URL(webhookUrl)

    // Open a connection
    def connection = url.openConnection() as HttpURLConnection
    connection.requestMethod = 'POST'
    connection.setRequestProperty('Content-Type', 'application/json')
    connection.doOutput = true

    // Send the message as JSON payload
    connection.outputStream.withWriter { writer ->
      writer.write(message)
    }

    // Check the response code
    def responseCode = connection.responseCode
    println "Response Code: ${responseCode}"

    connection.disconnect()
  }
}

sendMail {
    smtpServer {
        host "smtp.gmail.com"
        port 587
        user "la_malek@esi.dz"
        password "zasm lapp nzgn yxge"
    }
    mail {
        from "la_malek@esi.dz"
        to "amina.malek0203@gmail.com"
    }
}
